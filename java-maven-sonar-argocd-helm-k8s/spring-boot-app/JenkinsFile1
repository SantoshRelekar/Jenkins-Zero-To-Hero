pipeline{
  agent{
    docker{
      image 'coitlearningdemo/maven-abhishek-docker-agen:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
      registryCredentialsId 'docker-cred'
    }
  }
  stages{
    stage('Check out '){
      steps{
        sh '''echo passed'''
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test'){
      steps{
        sh '''cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn install'''
      }
    }
    stage('Static code analysis'){
      environment {
        SONAR_URL = "http://localhost:9000"
      }
      steps {
        sh '''echo sonar qube code analysis done'''
          //withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          //  sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
      }
    }
    stage('Build and Push Docker Image'){
      environment{
        DOCKER_IMAGE = "coitlearningdemo/ultimate-cicd-pipeline:v1"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps{
        script{
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -f Dockerfile -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.Image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
  }
}
